// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ReceiveFromChain extends ethereum.Event {
  get params(): ReceiveFromChain__Params {
    return new ReceiveFromChain__Params(this);
  }
}

export class ReceiveFromChain__Params {
  _event: ReceiveFromChain;

  constructor(event: ReceiveFromChain) {
    this._event = event;
  }

  get _srcChainId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _srcAddress(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _toAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SendToChain extends ethereum.Event {
  get params(): SendToChain__Params {
    return new SendToChain__Params(this);
  }
}

export class SendToChain__Params {
  _event: SendToChain;

  constructor(event: SendToChain) {
    this._event = event;
  }

  get _dstChainId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _toAddress(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RDNTBridge__estimateSendFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNativeFee(): BigInt {
    return this.value0;
  }

  getZroFee(): BigInt {
    return this.value1;
  }
}

export class RDNTBridge extends ethereum.SmartContract {
  static bind(address: Address): RDNTBridge {
    return new RDNTBridge("RDNTBridge", address);
  }

  circulatingSupply(): BigInt {
    let result = super.call(
      "circulatingSupply",
      "circulatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_circulatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "circulatingSupply",
      "circulatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateSendFee(
    _dstChainId: i32,
    _toAddress: Bytes,
    _amount: BigInt,
    _useZro: boolean,
    _adapterParams: Bytes
  ): RDNTBridge__estimateSendFeeResult {
    let result = super.call(
      "estimateSendFee",
      "estimateSendFee(uint16,bytes,uint256,bool,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_dstChainId)),
        ethereum.Value.fromBytes(_toAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_useZro),
        ethereum.Value.fromBytes(_adapterParams)
      ]
    );

    return new RDNTBridge__estimateSendFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_estimateSendFee(
    _dstChainId: i32,
    _toAddress: Bytes,
    _amount: BigInt,
    _useZro: boolean,
    _adapterParams: Bytes
  ): ethereum.CallResult<RDNTBridge__estimateSendFeeResult> {
    let result = super.tryCall(
      "estimateSendFee",
      "estimateSendFee(uint16,bytes,uint256,bool,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_dstChainId)),
        ethereum.Value.fromBytes(_toAddress),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_useZro),
        ethereum.Value.fromBytes(_adapterParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RDNTBridge__estimateSendFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SendFromCall extends ethereum.Call {
  get inputs(): SendFromCall__Inputs {
    return new SendFromCall__Inputs(this);
  }

  get outputs(): SendFromCall__Outputs {
    return new SendFromCall__Outputs(this);
  }
}

export class SendFromCall__Inputs {
  _call: SendFromCall;

  constructor(call: SendFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dstChainId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _toAddress(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _refundAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _zroPaymentAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _adapterParams(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class SendFromCall__Outputs {
  _call: SendFromCall;

  constructor(call: SendFromCall) {
    this._call = call;
  }
}
